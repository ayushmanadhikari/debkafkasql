version: '2'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      kafka:
    hostname: zookeeper
    ports:
      - 2181:2181
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOOKEEPER_CLIENT_PORT: 2181
        #ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./data/zookeeper/data:/data
      - ./data/zookeeper/datalog:/datalog

  kafka:
    image: confluentinc/cp-kafka:4.0.0
    networks:
      kafka:
    hostname: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_REPLICA_FETCH_MAX_BYTES: 100000000
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DEFAULT_REPLICATION_STATUS: 3
    volumes:
      - ./data/kafka/data:/var/lib/kafka/data

  kafka2:
    image: confluentinc/cp-kafka:4.0.0
    networks:
      kafka:
    hostname: kafka2
    ports:
      - 9093:9093
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_ADVERTISED_HOST_NAME: kafka2
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_REPLICA_FETCH_MAX_BYTES: 100000000
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DEFAULT_REPLICATION_STATUS: 3
    volumes:
      - ./data/kafka2/data:/var/lib/kafka/data

  kafka3:
    image: confluentinc/cp-kafka:4.0.0
    networks:
      kafka:
    hostname: kafka3
    ports:
      - 9094:9094
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
      KAFKA_ADVERTISED_HOST_NAME: kafka3
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_REPLICA_FETCH_MAX_BYTES: 100000000
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DEFAULT_REPLICATION_STATUS: 3
    volumes:
      - ./data/kafka3/data:/var/lib/kafka/data

  kafka4:  # remove me
    image: confluentinc/cp-kafka:4.0.0
    networks:
      kafka:
    hostname: kafka4
    ports:
      - 9095:9095
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka4:9095
      KAFKA_ADVERTISED_HOST_NAME: kafka4
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 4
      KAFKA_LOG4J_LOGGERS: kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_REPLICA_FETCH_MAX_BYTES: 100000000
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DEFAULT_REPLICATION_STATUS: 3
    volumes:
      - ./data/kafka4/data:/var/lib/kafka/data

  registry:
    image: confluentinc/cp-schema-registry:4.0.0
    networks:
      kafka:
    hostname: registry
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_HOST_NAME: registry
      SCHEMA_REGISTRY_LISTENERS: http://registry:8081
      SCHEMA_REGISTRY_DEBUG: "true"
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'  # for CORS in UI, remove on production
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'  # for CORS in UI, remove on production
    ports:
      - 8081:8081
    depends_on:
      - zookeeper

  rest:
    image: confluentinc/cp-kafka-rest:4.0.0
    networks:
      kafka:
    ports:
      - 8082:8082
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_REST_LISTENERS: http://rest:8082
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://registry:8081
      KAFKA_REST_HOST_NAME: rest
      KAFKA_REST_ACCESS_CONTROL_ALLOW_ORIGIN: '*'  # for CORS in UI, remove on production
      KAFKA_REST_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,DELETE,OPTIONS'  # for CORS in UI, remove on production
    depends_on:
      - kafka
      - zookeeper

  connect:
    image: confluentinc/cp-kafka-connect:latest
    networks:
      kafka:
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka2:9093
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: quickstart-avro
      CONNECT_CONFIG_STORAGE_TOPIC: quickstart-avro-config
      CONNECT_OFFSET_STORAGE_TOPIC: quickstart-avro-offsets
      CONNECT_STATUS_STORAGE_TOPIC: quickstart-avro-status
      #CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      #CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_ACCESS_CONTROL_ALLOW_ORIGIN: '*'  # for CORS in UI, remove on production
      CONNECT_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,DELETE,OPTIONS'  # for CORS in UI, remove on production
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://registry:8081
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_PLUGIN_PATH: /usr/share/java/connector-plugins
    depends_on:
      - zookeeper
      - kafka
      - kafka2
      - kafka3
      - registry
    volumes:
      - ./data/connect/file:/tmp/quickstart
      - ./data/connect/jars:/etc/kafka-connect/jars
      - ./data/connect/plugins:/usr/share/java/connector-plugins

  uitopics:
    image: landoop/kafka-topics-ui
    networks:
      kafka:
    ports:
      - 8001:8000
    environment:
      KAFKA_REST: http://localhost:8082
      KAFKA_REST_PROXY_URL: http://localhost:8082
      PROXY_SKIP_VERIFY: "true"
    depends_on:
      - zookeeper
      - kafka
      - rest

  uiregistry:
    image: landoop/schema-registry-ui
    networks:
      kafka:
    ports:
      - 8002:8000
    environment:
      SCHEMAREGISTRY_URL: http://localhost:8081
    depends_on:
      - zookeeper
      - kafka
      - registry

  uiconnect:
    image: landoop/kafka-connect-ui
    networks:
      kafka:
    ports:
      - 8003:8000
    environment:
      CONNECT_URL: http://connect:8083
    depends_on:
      - zookeeper
      - kafka
      - connect

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
    networks:
      kafka:
    ports:
    - 9200
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      #- "xpack.security.enabled=false"
      - transport.host=localhost
      - transport.tcp.port=9300
      - http.port=9200
      - network.host=0.0.0.0
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data

  mongo:
    image: mongo:latest
    networks:
      kafka:
    ports:
    - 27017
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
      - MONGODB_USER="user"
      - MONGODB_PASS="pass"
    volumes:
      - ./data/mongo:/data/db
    command: mongod --smallfiles #--logpath=/dev/null # --quiet

networks:
  kafka:
    driver: bridge
